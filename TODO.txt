TODO: 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~General~~~~~~~~~~~~~~~~~~~~~~~~~
ensure ENVI header b.b. is updated if using UAVSAR clip; 
nudge to get alignment bw UAVSAR and training data, 
look at rasterizing alg and make sure it's not adding extra space to the training area; 
*erosion of training data in arc/gdal,
set correct output path for training image stack/clip; 
output txt file to list orig file
name and number-class lookup; 
change output of training image to be in Train directory, 
why are training and veiwing images slightly offset?  resampling boundaries? 
(use NoData mask for training data: https://gdal.org/development/rfc/rfc15_nodatabitmask.html#rfc-15, but will need to copy mask_valid_pixels to XXX.msk); (convert to int16 precision to save memory); 
save arcmap viewing color files...; 
add cost functions...; 
noData mask for training;
turn off parallel except if on a cluster?
speckle filtering?
*Need better water and FD classes
*Run training for lots of param options and figure out which ones most imp- then use those
*Better training data! Then re-run trainingImageImport.m
*Try with C3 matrix or other decomp to see if yellow overlay is improved or better class distinction.
* Try decomp with no moving (boxcar) window filter
*Range correction and inter-year differences.(ENVI histogram?)
Run in regression mode to determine optimal class divisions?
Test effect of not using incidence angle as a feature to remove potential range-of-training-area bias
Update colors to be color-blind friendly
Near-and far range masking or simply save output file w range band
Add tall shrub class!
* Fix NoData output issues...
* dynamically assign mean incidence angle, or use lookup table from metatdata.ann file
Speed up trainingImageImport.m by adding parallel
Fix GeoTiffWrite alternatives for large bigtiffs
Auto/streamlined env.input(xx) ingest
**Add H/a/alpha or Sinclair matrix or AVIRIS into workflows
*Illum angle correction for shield
Multithread gdalwarp, dep on linux or Brown- but careful if running loops in parallel
add ifunix branch to use gdaledit.py instead of gdalwarp
RE-write parallel_cat_run.sh as a slurm batch file that uses srun instead of bash to call the processing function 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PixelClassifier~~~~~~~~~~~~~~~~~~~~~~~~~
TODO: change plotting for n-band images; 
test w multiple imgs in training dir (maybe set to load indiv training image sets into mem one at a time); 
circumvent output method of writing to sep files, then combining- just combine on the first try (in pixelclassifier.m); (save output training diagram/image to folder)
mirror window in movingstd instead of shrink...
k-fold cross val for number of leaves?
Memory optimization/block proc, if necessary
Make addOutputImages.m more general by removing function calls to env (and delte .png files)
Community service: Update fileexchange script for the following with gif fix: D:\Dropbox\Matlab\DownloadedCode\CaptureFigVid\CaptureFigVid\CaptureFigVid_EK.m
Delete class mask images in addOutputImages.m as cleanup
make mem efficient by possibly modifying way imClassify.m saves subsets{i} all the same
Re-write to only compute 4 sigmas, not >=8
Possible LOO cross val on n-value for range correction, and try non-cosine as well
try adding in NaNs, but removing NaNs just before steerable detector to save compute time...
save uncertainties of each class by normalizing class probs by total prob
More radiometric cal: I would plot sigma, gamma and Freeman values based on inc angle and eval if I need to improve my method.
    Then, I could come up with empirical correction, or use Chao's values.
    I could also implement the Ulander 1996 illum. area correction
    Run with only raw Freeman image ratios or inter-class variance
view(treeBag.Trees{1}, 'Mode', 'graph')
* Rewrite for large datasets or chunk up YF lines (auto change chunk size if isunix)
** if classifying in parallel (2 workers), make parpool(4) and call for 8 cpus, or change chunking size and num cpus during classification to avoid memory crash! 
* Change to not load all files in dir. into memory!
* Put slope into classifier?
* Fix training image bug on ASC (search for %%HERE in combine_imgs; mask is wrong size or output is NaN)
* Add histogram matching or use diff decomp (Sinclair) so as to accurately compare between seasons/years if bad calibration... yFlats vals were low

* Radiometric terrain correction / MapReady.... redo entire workflow...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LINUX~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prep trainingImageImport.m to be like viewingImageImport.m
add ability to sbatch each test file in parallel!  Need command line input for which files to run on
X make range correction additions linux-compatible
set data dir input files to parse out beginning paths and _grd so I can use same for both scripts
X Fix stacking bug so I can run on second Shield Image! X
parallelize training imageImport to use parfor on two cores 

~~~~~~~~~~~~~~~~~~~~~~~~NOTE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
nodata value is not dynamically defined in the gdal calls
pixelClassifierTrain doesn't have if statements for non Freeman-inc input class options

~~~~~~~~~~~~~~~~~~~~~~~~DONE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
add bounding box input to create smaller training file tif, reproject,
run with only raw Freeman images
add moving std feature
test training using 3 bands!; 
modify to work on n-band images, 
how to do deal w empty files for empty training classes; 
automate bounding box selection
*What percentage of  training px are being used? A: <1
*making confusion matrix; 
re-plot histograms to better align by band
XAdd Lee filter (wiener2.m)
X Remove some of the filters from sigma: i.e. Hess
After AGU: add NoData class, use translation features just for x- to combat overlay effect?
*** Add in W2 class (removed by mistake...)!!!
* Rotate offset images and only use directions parallel to look angle (discard orthogonals)

~~~~~~~~~~Modify for re-distribution of PixelClassifier Code~~~~~~~~~~~~~~
rfTrain.m
pixelClassifierTrain.m - validition and concat of n=3 bandns to make F